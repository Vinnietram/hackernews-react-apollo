{"version":3,"sources":["utils.js","components/Link.js","constants.js","components/LinkList.js","components/CreateLink.js","components/Header.js","components/Login.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","VOTE_MUTATION","gql","Link","authToken","localStorage","getItem","className","this","props","index","mutation","variables","linkId","link","id","voteMutation","onClick","description","url","votes","length","postedBy","name","createdAt","Component","FEED_QUERY","LinkList","query","loading","error","data","linksToRender","feed","links","map","key","POST_MUTATION","CreateLink","state","value","onChange","e","setState","target","type","placeholder","onCompleted","history","push","postMutation","Header","to","removeItem","withRouter","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","email","password","_confirm","a","signup","token","_saveUserData","setItem","FEED_SEARCH_QUERY","Search","filter","_executeSearch","client","result","withApollo","App","exact","path","component","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","ApolloClient","concat","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sSA4BS,SAASA,EAAsBC,GAGpC,OA/BJ,SAAwBC,EAASC,GAC7B,IAMMC,EAAUF,EAAUC,EAE1B,OAAIC,EAAUC,IACL,WAGLD,EAZ0B,IAarB,sBACEA,EAbiBC,KAcnBC,KAAKC,MAAMH,EAfU,KAeyB,WAC5CA,EAdgBI,MAelBF,KAAKC,MAAMH,EAhBQC,MAgByB,SAC1CD,EAfkBK,OAgBpBH,KAAKC,MAAMH,EAjBOI,OAiByB,YACzCJ,EAhBiBK,QAiBnBH,KAAKC,MAAMH,EAlBSK,QAkByB,UAE7CH,KAAKC,MAAMH,EAnBQK,SAmByB,aAO9CC,EAFK,IAAIC,MAAOC,UACP,IAAID,KAAKV,GAAMW,W,8VCxBnC,IAAMC,EAAgBC,IAAH,KAoDJC,E,uKA9BX,IAAMC,EAAYC,aAAaC,QC5BT,cD6BtB,OACE,yBAAKC,UAAU,wBACb,yBAAKA,UAAU,qBACb,0BAAMA,UAAU,QAAQC,KAAKC,MAAMC,MAAQ,EAA3C,KACCN,GAAa,kBAAC,IAAD,CAAUO,SAAUV,EAAeW,UAAW,CAAEC,OAAQL,KAAKC,MAAMK,KAAKC,MACnF,SAAAC,GAAY,OACX,yBAAKT,UAAU,eAAeU,QAASD,GAAvC,cAMN,yBAAKT,UAAU,OACb,6BACGC,KAAKC,MAAMK,KAAKI,YADnB,KACkCV,KAAKC,MAAMK,KAAKK,IADlD,KAGA,yBAAKZ,UAAU,mBACZC,KAAKC,MAAMK,KAAKM,MAAMC,OADzB,cAC4C,IACzCb,KAAKC,MAAMK,KAAKQ,SACbd,KAAKC,MAAMK,KAAKQ,SAASC,KACzB,UAAW,IACdnC,EAAsBoB,KAAKC,MAAMK,KAAKU,kB,GAxBhCC,a,mVErBnB,IAAMC,EAAaxB,IAAH,KA8CDyB,E,uKArBX,OACI,kBAAC,IAAD,CAAOC,MAAOF,IACX,YAA+B,IAA5BG,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,GAAIF,EAAS,OAAO,yCACpB,GAAIC,EAAO,OAAO,sCAElB,IAAME,EAAgBD,EAAKE,KAAKC,MAEhC,OACE,6BACGF,EAAcG,KAAI,SAACrB,EAAMJ,GAAP,OACjB,kBAAC,EAAD,CAAM0B,IAAKtB,EAAKC,GAAID,KAAMA,EAAMJ,MAAOA,e,GAblCe,a,+PCxBvB,IAAMY,EAAgBnC,IAAH,KAgDJoC,E,4MApCbC,MAAQ,CACNrB,YAAa,GACbC,IAAK,I,uDAGG,IAAD,SACsBX,KAAK+B,MAA1BrB,EADD,EACCA,YAAaC,EADd,EACcA,IACrB,OACE,6BACE,yBAAKZ,UAAU,wBACb,2BACEA,UAAU,MACViC,MAAOtB,EACPuB,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEzB,YAAawB,EAAEE,OAAOJ,SACrDK,KAAK,OACLC,YAAY,+BAEd,2BACEvC,UAAU,MACViC,MAAOrB,EACPsB,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAExB,IAAKuB,EAAEE,OAAOJ,SAC7CK,KAAK,OACLC,YAAY,0BAGZ,kBAAC,IAAD,CACEnC,SAAU0B,EACVzB,UAAW,CAAEM,cAAaC,OAC1B4B,YAAa,kBAAM,EAAKtC,MAAMuC,QAAQC,KAAK,QACxC,SAAAC,GAAY,OAAI,4BAAQjC,QAASiC,GAAjB,kB,GA9BRzB,a,eCVnB0B,E,uKACM,IAAD,OACD/C,EAAYC,aAAaC,QHPT,cGQtB,OACE,yBAAKC,UAAU,0CACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,WAAf,eACA,kBAAC,IAAD,CAAM6C,GAAG,IAAI7C,UAAU,0BAAvB,OAGA,yBAAKA,UAAU,OAAf,KACA,kBAAC,IAAD,CAAM6C,GAAG,UAAU7C,UAAU,0BAA7B,UAGCH,GACC,yBAAKG,UAAU,QACb,yBAAKA,UAAU,OAAf,KACA,kBAAC,IAAD,CAAM6C,GAAG,UAAU7C,UAAU,0BAA7B,YAMN,yBAAKA,UAAU,mBACZH,EACC,yBACEG,UAAU,oBACVU,QAAS,WACPZ,aAAagD,WHjCH,cGkCV,EAAK5C,MAAMuC,QAAQC,KAAnB,OAJJ,UAUE,kBAAC,IAAD,CAAMG,GAAG,SAAS7C,UAAU,0BAA5B,e,GAnCOkB,aA6CN6B,cAAWH,G,4dC7C1B,IAAMI,EAAkBrD,IAAH,KAQfsD,EAAiBtD,IAAH,KA+ELuD,E,4MAtEblB,MAAQ,CACNmB,OAAO,EACPC,MAAO,GACPC,SAAU,GACVrC,KAAM,I,EAuDRsC,S,uCAAW,WAAM9B,GAAN,iBAAA+B,EAAA,wDACS,EAAKvB,MAAMmB,MAAQ3B,EAAK2B,MAAQ3B,EAAKgC,OAA/CC,EADC,EACDA,MACR,EAAKC,cAAcD,GACnB,EAAKvD,MAAMuC,QAAQC,KAAnB,KAHS,2C,wDAMXgB,cAAgB,SAAAD,GACd3D,aAAa6D,QJxFS,aIwFWF,I,uDA3DzB,IAAD,SACkCxD,KAAK+B,MAAtCmB,EADD,EACCA,MAAOC,EADR,EACQA,MAAOC,EADf,EACeA,SAAUrC,EADzB,EACyBA,KAChC,OACE,6BACE,wBAAIhB,UAAU,OAAOmD,EAAQ,QAAU,WACvC,yBAAKnD,UAAU,qBACXmD,GACA,2BACElB,MAAOjB,EACPkB,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEpB,KAAMmB,EAAEE,OAAOJ,SAC9CK,KAAK,OACLC,YAAY,cAGhB,2BACEN,MAAOmB,EACPlB,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEgB,MAAOjB,EAAEE,OAAOJ,SAC/CK,KAAK,OACLC,YAAY,uBAEd,2BACEN,MAAOoB,EACPnB,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEiB,SAAUlB,EAAEE,OAAOJ,SAClDK,KAAK,WACLC,YAAY,4BAGhB,yBAAKvC,UAAU,YACP,kBAAC,IAAD,CACII,SAAU+C,EAAQF,EAAiBD,EACnC3C,UAAW,CAAE+C,QAAOC,WAAUrC,QAC9BwB,YAAa,SAAAhB,GAAI,OAAI,EAAK8B,SAAS9B,MAElC,SAAApB,GAAQ,OACL,yBAAKJ,UAAU,qBAAqBU,QAASN,GACxC+C,EAAQ,QAAU,qBAIrC,yBACEnD,UAAU,iBACVU,QAAS,kBAAM,EAAK0B,SAAS,CAAEe,OAAQA,MAEtCA,EACG,6BACA,kC,GArDIjC,a,oZChBpB,IAAM0C,EAAoBjE,IAAH,KAuBjBkE,E,4MAEJ7B,MAAQ,CACNL,MAAO,GACPmC,OAAQ,I,EAqBVC,e,sBAAiB,gCAAAR,EAAA,6DACPO,EAAW,EAAK9B,MAAhB8B,OADO,SAEM,EAAK5D,MAAM8D,OAAO3C,MAAM,CAC3CA,MAAOuC,EACPvD,UAAW,CAAEyD,YAJA,OAETG,EAFS,OAMTtC,EAAQsC,EAAOzC,KAAKE,KAAKC,MAC/B,EAAKS,SAAS,CAAET,UAPD,2C,uDAlBP,IAAD,OACP,OACE,6BACE,sCAEE,2BACEW,KAAK,OACLJ,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAE0B,OAAQ3B,EAAEE,OAAOJ,WAElD,4BAAQvB,QAAS,kBAAM,EAAKqD,mBAA5B,OAED9D,KAAK+B,MAAML,MAAMC,KAAI,SAACrB,EAAMJ,GAAP,OACpB,kBAAC,EAAD,CAAM0B,IAAKtB,EAAKC,GAAID,KAAMA,EAAMJ,MAAOA,Y,GAnB5Be,aAoCNgD,cAAWL,GCtCXM,E,uKAhBX,OACE,yBAAKnE,UAAU,cACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,2BACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoE,OAAK,EAACC,KAAK,IAAIC,UAAWlD,IACjC,kBAAC,IAAD,CAAOgD,OAAK,EAACC,KAAK,UAAUC,UAAWvC,IACvC,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,SAASC,UAAWpB,IACtC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,UAAUC,UAAWT,W,GAVjC3C,aCIEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2CCFAC,EAAWC,YAAe,CAC9BC,IAAK,0BAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BzB,EAAQ3D,aAAaC,QRrBH,cQsBxB,MAAO,CACLmF,QAAQ,2BACHA,GADE,IAELC,cAAe1B,EAAK,iBAAaA,GAAU,SAM3CO,EAAS,IAAIoB,IAAa,CAC9B7E,KAAMwE,EAASM,OAAOT,GACtBU,MAAO,IAAIC,MAIbC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBzB,OAAQA,GACtB,kBAAC,EAAD,QAGJ0B,SAASC,eAAe,SDwFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3E,GACL4E,QAAQ5E,MAAMA,EAAM6E,c","file":"static/js/main.a7237055.chunk.js","sourcesContent":["function timeDifference(current, previous) {\r\n    const milliSecondsPerMinute = 60 * 1000\r\n    const milliSecondsPerHour = milliSecondsPerMinute * 60\r\n    const milliSecondsPerDay = milliSecondsPerHour * 24\r\n    const milliSecondsPerMonth = milliSecondsPerDay * 30\r\n    const milliSecondsPerYear = milliSecondsPerDay * 365\r\n  \r\n    const elapsed = current - previous\r\n  \r\n    if (elapsed < milliSecondsPerMinute / 3) {\r\n      return 'just now'\r\n    }\r\n  \r\n    if (elapsed < milliSecondsPerMinute) {\r\n      return 'less than 1 min ago'\r\n    } else if (elapsed < milliSecondsPerHour) {\r\n      return Math.round(elapsed / milliSecondsPerMinute) + ' min ago'\r\n    } else if (elapsed < milliSecondsPerDay) {\r\n      return Math.round(elapsed / milliSecondsPerHour) + ' h ago'\r\n    } else if (elapsed < milliSecondsPerMonth) {\r\n      return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\r\n    } else if (elapsed < milliSecondsPerYear) {\r\n      return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\r\n    } else {\r\n      return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\r\n    }\r\n  }\r\n  \r\n  export function timeDifferenceForDate(date) {\r\n    const now = new Date().getTime()\r\n    const updated = new Date(date).getTime()\r\n    return timeDifference(now, updated)\r\n  }","import React, { Component } from 'react'\r\nimport { AUTH_TOKEN } from '../constants'\r\nimport { timeDifferenceForDate } from '../utils'\r\nimport { Mutation } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\n\r\nconst VOTE_MUTATION = gql`\r\n  mutation VoteMutation($linkId: ID!) {\r\n    vote(linkId: $linkId) {\r\n      id\r\n      link {\r\n       id\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nclass Link extends Component {\r\n  render() {\r\n    const authToken = localStorage.getItem(AUTH_TOKEN)\r\n    return (\r\n      <div className=\"flex mt2 items-start\">\r\n        <div className=\"flex items-center\">\r\n          <span className=\"gray\">{this.props.index + 1}.</span>\r\n          {authToken && <Mutation mutation={VOTE_MUTATION} variables={{ linkId: this.props.link.id }}>\r\n            {voteMutation => (\r\n              <div className=\"ml1 gray f11\" onClick={voteMutation}>\r\n                â–²\r\n              </div>\r\n            )}\r\n          </Mutation>}\r\n        </div>\r\n        <div className=\"ml1\">\r\n          <div>\r\n            {this.props.link.description} ({this.props.link.url})\r\n          </div>\r\n          <div className=\"f6 lh-copy gray\">\r\n            {this.props.link.votes.length} votes | by{' '}\r\n            {this.props.link.postedBy\r\n              ? this.props.link.postedBy.name\r\n              : 'Unknown'}{' '}\r\n            {timeDifferenceForDate(this.props.link.createdAt)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Link","export const AUTH_TOKEN = 'auth-token'","import React, { Component } from 'react'\r\nimport Link from './Link'\r\nimport { Query } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\n\r\nconst FEED_QUERY = gql`\r\n  {\r\n    feed {\r\n      links {\r\n        id\r\n        createdAt\r\n        url\r\n        description\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nclass LinkList extends Component {\r\n  render() {\r\n    return (\r\n        <Query query={FEED_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <div>Fetching</div>\r\n            if (error) return <div>Error</div>\r\n      \r\n            const linksToRender = data.feed.links\r\n      \r\n            return (\r\n              <div>\r\n                {linksToRender.map((link, index) => (\r\n                  <Link key={link.id} link={link} index={index} />\r\n                ))}\r\n              </div>\r\n            )\r\n          }}\r\n        </Query>\r\n      )\r\n  }\r\n}\r\n\r\nexport default LinkList","import React, { Component } from 'react'\r\nimport { Mutation } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\n\r\nconst POST_MUTATION = gql`\r\n  mutation PostMutation($description: String!, $url: String!) {\r\n    post(description: $description, url: $url) {\r\n      id\r\n      createdAt\r\n      url\r\n      description\r\n    }\r\n  }\r\n`\r\n\r\nclass CreateLink extends Component {\r\n  state = {\r\n    description: '',\r\n    url: '',\r\n  }\r\n\r\n  render() {\r\n    const { description, url } = this.state\r\n    return (\r\n      <div>\r\n        <div className=\"flex flex-column mt3\">\r\n          <input\r\n            className=\"mb2\"\r\n            value={description}\r\n            onChange={e => this.setState({ description: e.target.value })}\r\n            type=\"text\"\r\n            placeholder=\"A description for the link\"\r\n          />\r\n          <input\r\n            className=\"mb2\"\r\n            value={url}\r\n            onChange={e => this.setState({ url: e.target.value })}\r\n            type=\"text\"\r\n            placeholder=\"The URL for the link\"\r\n          />\r\n        </div>\r\n            <Mutation \r\n              mutation={POST_MUTATION}\r\n              variables={{ description, url }}\r\n              onCompleted={() => this.props.history.push('/')}>\r\n                {postMutation => <button onClick={postMutation}>Submit</button>}\r\n            </Mutation>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CreateLink","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { withRouter } from 'react-router'\r\nimport { AUTH_TOKEN } from '../constants'\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    const authToken = localStorage.getItem(AUTH_TOKEN)\r\n    return (\r\n      <div className=\"flex pa1 justify-between nowrap orange\">\r\n        <div className=\"flex flex-fixed black\">\r\n          <div className=\"fw7 mr1\">Hacker News</div>\r\n          <Link to=\"/\" className=\"ml1 no-underline black\">\r\n            new\r\n          </Link>\r\n          <div className=\"ml1\">|</div>\r\n          <Link to=\"/search\" className=\"ml1 no-underline black\">\r\n            search\r\n          </Link>          \r\n          {authToken && (\r\n            <div className=\"flex\">\r\n              <div className=\"ml1\">|</div>\r\n              <Link to=\"/create\" className=\"ml1 no-underline black\">\r\n                submit\r\n              </Link>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"flex flex-fixed\">\r\n          {authToken ? (\r\n            <div\r\n              className=\"ml1 pointer black\"\r\n              onClick={() => {\r\n                localStorage.removeItem(AUTH_TOKEN)\r\n                this.props.history.push(`/`)\r\n              }}\r\n            >\r\n              logout\r\n            </div>\r\n          ) : (\r\n              <Link to=\"/login\" className=\"ml1 no-underline black\">\r\n                login\r\n              </Link>\r\n            )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Header)","import React, { Component } from 'react'\r\nimport { AUTH_TOKEN } from '../constants'\r\nimport { Mutation } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\n\r\nconst SIGNUP_MUTATION = gql`\r\n  mutation SignupMutation($email: String!, $password: String!, $name: String!) {\r\n    signup(email: $email, password: $password, name: $name) {\r\n      token\r\n    }\r\n  }\r\n`\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    login: true, // switch between Login and SignUp\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n  }\r\n\r\n  render() {\r\n    const { login, email, password, name } = this.state\r\n    return (\r\n      <div>\r\n        <h4 className=\"mv3\">{login ? 'Login' : 'Sign Up'}</h4>\r\n        <div className=\"flex flex-column\">\r\n          {!login && (\r\n            <input\r\n              value={name}\r\n              onChange={e => this.setState({ name: e.target.value })}\r\n              type=\"text\"\r\n              placeholder=\"Your name\"\r\n            />\r\n          )}\r\n          <input\r\n            value={email}\r\n            onChange={e => this.setState({ email: e.target.value })}\r\n            type=\"text\"\r\n            placeholder=\"Your email address\"\r\n          />\r\n          <input\r\n            value={password}\r\n            onChange={e => this.setState({ password: e.target.value })}\r\n            type=\"password\"\r\n            placeholder=\"Choose a safe password\"\r\n          />\r\n        </div>\r\n        <div className=\"flex mt3\">\r\n                <Mutation\r\n                    mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\r\n                    variables={{ email, password, name }}\r\n                    onCompleted={data => this._confirm(data)}\r\n                >\r\n                    {mutation => (\r\n                        <div className=\"pointer mr2 button\" onClick={mutation}>\r\n                            {login ? 'login' : 'create account'}\r\n                        </div>\r\n                    )}\r\n                </Mutation>\r\n          <div\r\n            className=\"pointer button\"\r\n            onClick={() => this.setState({ login: !login })}\r\n          >\r\n            {login\r\n              ? 'need to create an account?'\r\n              : 'already have an account?'}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  _confirm = async data => {\r\n    const { token } = this.state.login ? data.login : data.signup\r\n    this._saveUserData(token)\r\n    this.props.history.push(`/`)\r\n  }\r\n\r\n  _saveUserData = token => {\r\n    localStorage.setItem(AUTH_TOKEN, token)\r\n  }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\nimport { withApollo } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\nimport Link from './Link'\r\n\r\nconst FEED_SEARCH_QUERY = gql`\r\n  query FeedSearchQuery($filter: String!) {\r\n    feed(filter: $filter) {\r\n      links {\r\n        id\r\n        url\r\n        description\r\n        createdAt\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nclass Search extends Component {\r\n\r\n  state = {\r\n    links: [],\r\n    filter: ''\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          Search\r\n          <input\r\n            type='text'\r\n            onChange={e => this.setState({ filter: e.target.value })}\r\n          />\r\n          <button onClick={() => this._executeSearch()}>OK</button>\r\n        </div>\r\n        {this.state.links.map((link, index) => (\r\n          <Link key={link.id} link={link} index={index} />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  _executeSearch = async () => {\r\n    const { filter } = this.state\r\n    const result = await this.props.client.query({\r\n      query: FEED_SEARCH_QUERY,\r\n      variables: { filter },\r\n    })\r\n    const links = result.data.feed.links\r\n    this.setState({ links })\r\n  }\r\n}\r\n\r\nexport default withApollo(Search)","import React, { Component } from 'react'\r\nimport LinkList from './LinkList'\r\nimport CreateLink from './CreateLink'\r\nimport Header from './Header'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Login from './Login'\r\nimport Search from './Search'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"center w85\">\r\n        <Header />\r\n        <div className=\"ph3 pv1 background-gray\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={LinkList} />\r\n            <Route exact path=\"/create\" component={CreateLink} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path='/search' component={Search} />            \r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    )\r\n  }  \r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './styles/index.css'\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport { AUTH_TOKEN } from './constants'\r\n\r\n// 1\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { setContext } from 'apollo-link-context'\r\n\r\n// 2\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:4000'\r\n})\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem(AUTH_TOKEN)\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : ''\r\n    }\r\n  }\r\n})\r\n\r\n// 3\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n})\r\n\r\n// 4\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}